{"version":3,"sources":["components/DailyWeather.tsx","components/CurrentWeather.tsx","components/ChangeCityFormComponent.tsx","components/Header.tsx","App.tsx","index.tsx"],"names":["DailyWeather","source","datetime","app_max_temp","app_min_temp","weather","icon","dateTime","Date","className","getDay","src","alt","CurrentWeather","todaySource","date","toDateString","data","temp","style","flexDirection","city_name","country_code","description","ChangeCityFormComponent","changeText","handleSubmit","useState","inputHandler","setInputHandler","type","onChange","e","target","value","onClick","title","Header","process","apikey","App","setWeather","loading","setLoading","loadGeoloc","setloadGeoloc","lat","lon","coords","setCoords","city","setCity","coordUrl","cityRequestUrl","a","navigator","geolocation","getCurrentPosition","latitude","longitude","useEffect","getData","mode","queryUrl","axios","get","response","status","alert","handleGeolocation","console","log","map","distData","id","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1a9b522a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../App.css\";\r\nexport default function DailyWeather({ source }: any) {\r\n\r\n  const iconUrl = \"https://www.weatherbit.io/static/img/icons/\";\r\n\r\n  const index = {\r\n    datetime: 400,\r\n    app_max_temp: \"max\",\r\n    app_min_temp: \"min\",\r\n    weather: {icon:\"c01d\"}\r\n  }\r\n\r\n    if (source === 0 ) {\r\n      source = index\r\n    }\r\n\r\n    var dateTime = new Date(source.datetime)\r\n    const days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Day\"];\r\n\r\n  return (\r\n    <div className=\"daily-component\">\r\n    <p className=\"temp-tex\">{source.datetime === 400? \"Day\": days[dateTime.getDay()]}</p>\r\n      <p className=\"temp-tex\">{source.app_max_temp} °</p>\r\n      <img\r\n        src={iconUrl + source.weather.icon + \".png\"}\r\n        className=\"daily-icon\" alt=\"Icon for the weather\"\r\n      />\r\n        <p className=\"temp-tex\">{source.app_min_temp} °</p>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function CurrentWeather({ todaySource }: any) {\r\n  let date = new Date();\r\n  const iconUrl = \"https://www.weatherbit.io/static/img/icons/\";\r\n  return (\r\n    <div>\r\n\r\n      <h3> {date.toDateString()} </h3>\r\n  \r\n        <div className=\"important-info\">\r\n \r\n          <p className=\"current-temperature\"> \r\n           {todaySource.data[0].temp} \r\n           </p>\r\n           <span style={{flexDirection: 'row'}}> \r\n                 {/* CITY NAME */}\r\n           <h4> {todaySource.city_name + \", \" + todaySource.country_code} </h4>\r\n           <h4>{todaySource.data[0].weather.description}</h4>\r\n           </span>\r\n           <img\r\n        src={iconUrl + todaySource.data[0].weather.icon + \".png\"}\r\n        className=\"main-icon\" alt=\"source data icon\"\r\n      />\r\n \r\n        </div>\r\n\r\n     \r\n  \r\n      {/* DATA TODAY */}\r\n      <hr></hr>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function ChangeCityFormComponent({\r\n  changeText,\r\n  handleSubmit,\r\n}: any) {\r\n  const [inputHandler, setInputHandler] = useState(\"\");\r\n\r\n  return (\r\n<div>\r\n        <input type=\"text\" onChange={(e) => setInputHandler(e.target.value)} />\r\n        <button\r\n          type=\"submit\"\r\n          className=\"btn-city\"\r\n          onClick={() => {\r\n            changeText(inputHandler)\r\n            handleSubmit();\r\n          }}\r\n        title=\"Look for the weather in the writed location\">\r\n          {\" \"}\r\n          <i className=\"fas fa-search-location fa-2x icon\"></i>\r\n        </button>\r\n</div>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nconst logoUrl = process.env.REACT_APP_logoURL;\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div className=\"header\"> \r\n        <p className=\"title\">La memeteo</p>\r\n          <img src={logoUrl} className=\"logo\" alt=\"Memeteo logo\"/>\r\n        </div>\r\n    )\r\n}\r\n","import \"./App.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport DailyWeather from \"./components/DailyWeather\";\r\nimport CurrentWeather from \"./components/CurrentWeather\";\r\nimport ChangeCityFormComponent from \"./components/ChangeCityFormComponent\"\r\nimport Header from \"./components/Header\"\r\n\r\nconst apikey = process.env.REACT_APP_apiKey;\r\n\r\nfunction App() {\r\n  const [weather, setWeather] = useState({\r\n    data: {\r\n      city_name: \"\",\r\n      country_code: \"\",\r\n      data: [{ temp: \"\", weather: { description: \"\", icon: \"\" } }],\r\n    },\r\n  });\r\n  const [loading, setLoading] = useState(true);\r\n  const [loadGeoloc, setloadGeoloc] = useState(true);\r\n  const [coords, setCoords] = useState({lat: 0, lon: 0})\r\n  const [city, setCity] = useState(\"Paris\")\r\n  const [input, setInput] = useState(\"\")\r\n\r\n  // par lat et lon\r\n  const coordUrl = `https://api.weatherbit.io/v2.0/forecast/daily?lat=${coords['lat']}&lon=${coords['lon']}&key=${apikey}&days=5`\r\n  \r\n  \r\n  // par name\r\n  const cityRequestUrl =\r\n    `https://api.weatherbit.io/v2.0/forecast/daily?city=${city}&days=5&key=${apikey}`;\r\n\r\n  async function handleGeolocation() {\r\n      navigator.geolocation.getCurrentPosition((data)=> {\r\n       setCoords({lat: data.coords.latitude, lon: data.coords.longitude})\r\n     })    \r\n     setloadGeoloc(false)  \r\n    } \r\n\r\n\r\n  useEffect(() => {\r\n    async function getData(mode: string) {\r\n\r\n      let queryUrl\r\n\r\n      mode === \"city\"? queryUrl = cityRequestUrl : queryUrl =  coordUrl\r\n\r\n        const response = await axios.get(queryUrl);\r\n\r\n        /* Quick catch if the user input its not a city  */ \r\n        if (response.status === 200) {\r\n          setWeather(response);\r\n          setLoading(false);\r\n        } else {\r\n          alert(\"The city that has been submited couldn't be found \")\r\n        }\r\n    }\r\n////// \r\n if (loadGeoloc) {\r\n    handleGeolocation()\r\n    console.log(coords)\r\n    getData(\"coord\")\r\n  }\r\n//////\r\n    if (loading) {\r\n      getData(\"city\");\r\n    }\r\n  //////\r\n  }, [loading, cityRequestUrl, loadGeoloc, coords]);\r\n\r\n \r\n   // -------- CHANGE CITY MANUALLY -------- // \r\n   const handleCityChange = () => {\r\n       console.log(city)\r\n     if (city !== \"\") {\r\n      setLoading(true)\r\n    \r\n     } else {\r\n       alert(\"City name cannot be empty\")\r\n     }\r\n \r\n   }\r\n  \r\n  // ----- GEOLOCATION ----------- //\r\n   const handleGeoRequest = () => {\r\n     setloadGeoloc(true)\r\n   }\r\n\r\n\r\n\r\n return (\r\n    <>\r\n    <div className=\"App\">\r\n    <Header/>\r\n        {!loading && <CurrentWeather todaySource={weather.data} />}\r\n\r\n      {/* 5 Next days */}\r\n      <main className=\"next-days\">\r\n      <DailyWeather source={0} />\r\n        {!loading &&\r\n          weather.data.data.map((distData) => {\r\n            return <DailyWeather source={distData} />;\r\n          })}\r\n      </main>\r\n    </div>\r\n\r\n      {/* Change City  Component */}\r\n      <section id=\"changecity-fc\">\r\n        <div>\r\n      <ChangeCityFormComponent changeText={setCity} handleSubmit={handleCityChange} />\r\n      \r\n        {/* Geolocation Component */}\r\n        <button className=\"btn-city\" title=\"Use your geolocalization coords\" onClick={ ()=> handleGeoRequest() }> <i className=\"fas fa-map-marked-alt fa-2x icon\"></i> </button>\r\n            </div>\r\n        </section>\r\n    </>\r\n  );\r\n  }\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}