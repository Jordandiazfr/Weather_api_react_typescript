{"version":3,"sources":["components/DailyWeather.tsx","components/CurrentWeather.tsx","components/ChangeCityFormComponent.tsx","components/Header.tsx","components/Geoloc.tsx","App.tsx","index.tsx"],"names":["DailyWeather","source","datetime","app_max_temp","app_min_temp","weather","icon","dateTime","Date","className","getDay","src","alt","CurrentWeather","todaySource","date","toDateString","data","temp","style","flexDirection","city_name","country_code","description","ChangeCityFormComponent","handleSubmit","useState","inputHandler","setInputHandler","type","onChange","e","target","value","onClick","title","Header","process","Geoloc","action","apikey","REACT_APP_apiKey","App","setWeather","loading","setLoading","loadGeoloc","setloadGeoloc","lat","lon","coords","setCoords","city","setCity","coordUrl","cityRequestUrl","a","navigator","geolocation","getCurrentPosition","latitude","longitude","getData","mode","queryUrl","axios","get","response","status","alert","handleGeolocation","console","log","map","distData","id","requestCity","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fc5bf930.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../App.css\";\nexport default function DailyWeather({ source }: any) {\n\n  const iconUrl = \"https://www.weatherbit.io/static/img/icons/\";\n\n  const index = {\n    datetime: 400,\n    app_max_temp: \"max\",\n    app_min_temp: \"min\",\n    weather: {icon:\"c01d\"}\n  }\n\n    if (source === 0 ) {\n      source = index\n    }\n\n    var dateTime = new Date(source.datetime)\n    const days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Day\"];\n\n  return (\n    <div className=\"daily-component\">\n    <p className=\"temp-tex\">{source.datetime === 400? \"Day\": days[dateTime.getDay()]}</p>\n      <p className=\"temp-tex\">{source.app_max_temp} °</p>\n      <img\n        src={iconUrl + source.weather.icon + \".png\"}\n        className=\"daily-icon\" alt=\"Icon for the weather\"\n      />\n        <p className=\"temp-tex\">{source.app_min_temp} °</p>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function CurrentWeather({ todaySource }: any) {\n  let date = new Date();\n  const iconUrl = \"https://www.weatherbit.io/static/img/icons/\";\n  return (\n    <div>\n\n      <h3> {date.toDateString()} </h3>\n  \n        <div className=\"important-info\">\n \n          <p className=\"current-temperature\"> \n           {todaySource.data[0].temp} \n           </p>\n           <span style={{flexDirection: 'row'}}> \n                 {/* CITY NAME */}\n           <h4> {todaySource.city_name + \", \" + todaySource.country_code} </h4>\n           <h4>{todaySource.data[0].weather.description}</h4>\n           </span>\n           <img\n        src={iconUrl + todaySource.data[0].weather.icon + \".png\"}\n        className=\"main-icon\" alt=\"source data icon\"\n      />\n \n        </div>\n\n     \n  \n      {/* DATA TODAY */}\n      <hr></hr>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\n\ntype props = {\n  handleSubmit: (requestCity: string) => void\n}\n\nexport default function ChangeCityFormComponent({handleSubmit}: props) {\n\n  const [inputHandler, setInputHandler] = useState(\"\");\n\n  return (\n    <>\n        <input type=\"text\" onChange={(e) => setInputHandler(e.target.value)} />\n        <button\n          type=\"submit\"\n          className=\"btn-city\"\n          onClick={() => {\n            handleSubmit(inputHandler);\n          }}\n        title=\"Look for the weather in the writed location\">\n          {\" \"}\n          <i className=\"fas fa-search-location fa-2x icon\"></i>\n        </button>\n  </>\n  );\n}\n","import React from 'react'\n\nconst logoUrl = process.env.REACT_APP_logoURL;\n\nexport default function Header() {\n    return (\n        <div className=\"header\"> \n        <p className=\"title\">La memeteo</p>\n          <img src={logoUrl} className=\"logo\" alt=\"Memeteo logo\"/>\n        </div>\n    )\n}\n","import React from 'react'\n\ntype geoProps = {\n    action:  ()=> void \n}\n\nexport default function Geoloc({action}: geoProps) {\n    return (\n              <button className=\"btn-city\" title=\"Use your geolocalization coords\" onClick={ ()=> action() }> \n              <i className=\"fas fa-map-marked-alt fa-2x icon\"></i> </button>\n    )\n}\n","import \"./App.css\";\nimport {useState} from \"react\";\nimport axios from \"axios\";\nimport DailyWeather from \"./components/DailyWeather\";\nimport CurrentWeather from \"./components/CurrentWeather\";\nimport ChangeCityFormComponent from \"./components/ChangeCityFormComponent\"\nimport Header from \"./components/Header\"\nimport Geoloc from \"./components/Geoloc\"\n\nconst apikey = process.env.REACT_APP_apiKey;\n\nfunction App() {\n  const [weather, setWeather] = useState({\n    data: {\n      city_name: \"\",\n      country_code: \"\",\n      data: [{ temp: \"\", weather: { description: \"\", icon: \"\" } }],\n    },\n  });\n  const [loading, setLoading] = useState(true);\n  const [loadGeoloc, setloadGeoloc] = useState(true);\n  const [coords, setCoords] = useState({lat: 0, lon: 0})\n  const [city, setCity] = useState(\"Paris\")\n\n  // par lat et lon\n  const coordUrl = `https://api.weatherbit.io/v2.0/forecast/daily?lat=${coords['lat']}&lon=${coords['lon']}&key=${apikey}&days=5`\n  \n  \n  // par name\n  const cityRequestUrl =\n    `https://api.weatherbit.io/v2.0/forecast/daily?city=${city}&days=5&key=${apikey}`;\n\nasync function handleGeolocation() {\n      navigator.geolocation.getCurrentPosition((data)=> {\n       setCoords({lat: data.coords.latitude, lon: data.coords.longitude})\n     })    \n     setloadGeoloc(false)  \n} \n\n\nasync function getData(mode: string) {\n      let queryUrl\n      mode === \"city\"? queryUrl = cityRequestUrl : queryUrl =  coordUrl\n        const response = await axios.get(queryUrl);\n        /* Quick catch if the user input its not a city  */ \n        if (response.status === 200) {\n          setWeather(response);\n          setLoading(false);\n        } else {\n          alert(\"The city that has been submited couldn't be found \")\n        }\n}\n\n\nif (loadGeoloc) {\n    handleGeolocation()\n    console.log(coords)\n    getData(\"coord\")\n}\n\nif (loading) {\n  getData(\"city\");\n}\n\n// -------- CHANGE CITY MANUALLY -------- // \nconst handleCityChange = (requestCity: string) => {\n  console.log(city)\n  if (city !== \"\") { \n    setCity(requestCity)\n    setLoading(true)\n    getData(\"city\")\n     } else {\n        alert(\"City name cannot be empty\")\n     }\n\n   }\n  \n  // ----- GEOLOCATION ----------- //\n   const handleGeoRequest = () => {\n     setloadGeoloc(true)\n   }\n\n return (\n    <>\n    <div className=\"App\">\n      <Header/>\n      \n        {!loading && <CurrentWeather todaySource={weather.data} />}\n\n        {/* 5 Next days */}\n        \n        <main className=\"next-days\">\n          <DailyWeather source={0} />\n            {!loading && weather.data.data.map(distData => <DailyWeather source={distData} /> )}\n      </main>\n    </div>\n\n      {/* Change City  Component */}\n      <section id=\"changecity-fc\">\n\n      <ChangeCityFormComponent handleSubmit={handleCityChange} />\n      \n        {/* Geolocation Component */}\n        <Geoloc action={handleGeoRequest} />\n\n      </section>\n    </>\n  );\n  }\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}